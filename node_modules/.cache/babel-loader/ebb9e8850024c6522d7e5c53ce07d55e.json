{"ast":null,"code":"var _jsxFileName = \"/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      url: null,\n      playName: null,\n      link: null,\n      done: null\n    };\n\n    this.handleChange = async e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        done: \"Converting...\",\n        link: null\n      });\n      const {\n        source\n      } = this.props;\n      const theSource = {\n        source\n      };\n\n      if (theSource.source === \"appleToSpotify\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          idA2S\n        } = this.props;\n        const theid = {\n          idA2S\n        };\n        const {\n          spotifyToken\n        } = this.props;\n        let playName = this.state.playName;\n        let playlistURL = this.state.url;\n        let playlistURI = '';\n\n        if (playlistURL.includes(\"open.spotify\")) {\n          console.log(\"yes\");\n          let playlistURI = playlistURL.substr(2).split(\"playlist/\");\n          console.log(playlistURI);\n        }\n\n        let getAppleISRC = async function () {\n          fetch('http://localhost:8888/getAppleISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          });\n          /*.then((response)=>{\n            setTimeout(function(){\n                console.log(response.json())\n            },5000)\n          })*/\n        };\n\n        let createSpotifyPlaylist = async () => {\n          fetch('http://localhost:8888/createSpotifyPlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'createplaylist': playName,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          }).then(response => {\n            return response.json();\n          }).then(response => {\n            console.log(response);\n            console.log(response.done);\n            this.setState({\n              done: response.done,\n              link: response.link\n            });\n          });\n        };\n\n        getAppleISRC().then(() => {\n          setTimeout(function () {\n            createSpotifyPlaylist();\n          }, 10000);\n        });\n      }\n\n      if (theSource.source === \"spotifyToApple\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          spotifyToken\n        } = this.props;\n        const {\n          id\n        } = this.props;\n        const theid = {\n          id\n        };\n        let playName = this.state.playName;\n        let playlistURI = this.state.url;\n\n        let getSpotifyISRC = async function () {\n          fetch('http://localhost:8888/getSpotifyISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        let createApplePlaylist = async () => {\n          fetch('http://localhost:8888/createApplePlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'playlist': playName,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          }).then(response => {\n            return response.json();\n          }).then(response => {\n            console.log(response);\n            console.log(response.done);\n            this.setState({\n              done: response.done,\n              link: response.link\n            });\n          });\n        };\n\n        getSpotifyISRC().then(() => {\n          setTimeout(function () {\n            createApplePlaylist();\n          }, 10000);\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      size: \"med\",\n      type: \"text\",\n      placeholder: \"Enter Playlist URL\",\n      onChange: this.handleChange,\n      id: \"url\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control, {\n      size: \"med\",\n      type: \"text\",\n      placeholder: \"Enter Name of New Playlist\",\n      onChange: this.handleChange,\n      id: \"playName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, \"Convert!\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, this.state.done), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, this.state.link)));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    appleToken: state.appleToken,\n    id: state.id,\n    spotifyToken: state.spotifyToken,\n    idA2S: state.idA2S,\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps)(Converter);","map":{"version":3,"sources":["/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js"],"names":["React","Component","connect","Form","Button","Converter","state","url","playName","link","done","handleChange","e","setState","target","id","value","console","log","handleSubmit","preventDefault","source","props","theSource","appleToken","idA2S","theid","spotifyToken","playlistURL","playlistURI","includes","substr","split","getAppleISRC","fetch","method","headers","body","JSON","stringify","createSpotifyPlaylist","then","response","json","setTimeout","getSpotifyISRC","createApplePlaylist","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\n\nclass Converter extends Component{\n    \n\n    state = {\n        url: null,\n        playName: null,\n        link: null,\n        done: null\n    }\n    \n    handleChange = async (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n        console.log(this.state)\n        \n    }\n\n    handleSubmit = (e) => { \n        \n        \n        e.preventDefault();\n\n        this.setState({\n            done:\"Converting...\",\n            link: null\n        })\n\n\n        const { source } = this.props;\n        const theSource = { source };\n        if ( theSource.source === \"appleToSpotify\" ){\n           \n            const { appleToken } = this.props;\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            const { spotifyToken } = this.props;\n            let playName = this.state.playName\n            let playlistURL = this.state.url\n            let playlistURI =''\n            if (playlistURL.includes(\"open.spotify\")){\n                console.log(\"yes\")\n                let playlistURI = playlistURL.substr(2).split(\"playlist/\")\n                console.log(playlistURI)\n            }\n            \n\n\n            let getAppleISRC = async function(){\n                fetch('http://localhost:8888/getAppleISRC',{\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json'\n                },\n                    body:JSON.stringify({\n                        'url': playlistURI,\n                        'authToken': { appleToken },\n                        'id': theid\n                })\n                    \n                })/*.then((response)=>{\n                    setTimeout(function(){\n                        console.log(response.json())\n                    },5000)\n                })*/\n            }\n\n        let createSpotifyPlaylist =  (async()=>{\n            fetch('http://localhost:8888/createSpotifyPlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'createplaylist': playName,\n                    'authToken': {spotifyToken},\n                    'id':theid\n                })\n            }).then((response)=>{\n                \n                   return response.json()\n                \n            }).then((response)=>{\n                    \n                    console.log(response)\n                    console.log(response.done)\n                    this.setState({\n                        done:response.done,\n                        link:response.link\n                    })\n                \n            })\n        })\n        \n        getAppleISRC().then(()=>{\n            \n            setTimeout(function(){\n                createSpotifyPlaylist()\n        \n            },10000)\n        })\n\n        }\n        if ( theSource.source ===\"spotifyToApple\"){\n\n            const { appleToken } = this.props;\n            const { spotifyToken } = this.props;\n            const { id }=this.props\n            const theid = { id }\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n\n            let getSpotifyISRC = async function(){\n                \n                fetch('http://localhost:8888/getSpotifyISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { spotifyToken },\n                    'id': theid\n                })\n                    \n                })    \n            }\n\n            \n        let createApplePlaylist = (async()=>{\n            fetch('http://localhost:8888/createApplePlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'playlist': playName,\n                    'authToken': { appleToken },\n                    'id': theid\n\n                })\n            }).then((response)=>{\n                \n                return response.json()\n             \n             }).then((response)=>{\n                 \n                 console.log(response)\n                 console.log(response.done)\n                 this.setState({\n                     done:response.done,\n                     link:response.link\n                 })\n             \n            })\n        })\n        \n        getSpotifyISRC().then(()=>{\n            setTimeout(function(){\n                createApplePlaylist()\n            },10000)\n        })\n\n        }\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        <Form.Group>\n          <div class = \"text-center\">\n          <Form.Control size = \"med\" type = \"text\" placeholder=\"Enter Playlist URL\" onChange={this.handleChange} id=\"url\"/>\n          <br />\n          <Form.Control  size = \"med\" type = \"text\" placeholder = \"Enter Name of New Playlist\" onChange={this.handleChange} id=\"playName\"/>\n          <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>Convert!</Button>\n            <h1>{this.state.done}</h1>\n            <h1>{this.state.link}</h1>\n          </div>\n        </Form.Group>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);"]},"metadata":{},"sourceType":"module"}
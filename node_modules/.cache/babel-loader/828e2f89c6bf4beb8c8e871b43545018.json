{"ast":null,"code":"var _jsxFileName = \"/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: null,\n      playName: null,\n      link: null,\n      done: null\n    };\n\n    this.handleChange = async e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        done: \"Converting...\"\n      });\n      const {\n        source\n      } = this.props;\n      const theSource = {\n        source\n      };\n\n      if (theSource.source === \"appleToSpotify\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          idA2S\n        } = this.props;\n        const theid = {\n          idA2S\n        };\n        const {\n          spotifyToken\n        } = this.props;\n        let playName = this.state.playName;\n        let playlistURI = this.state.url;\n\n        let getAppleISRC = async function () {\n          fetch('http://localhost:8888/getAppleISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          });\n          /*.then((response)=>{\n            setTimeout(function(){\n                console.log(response.json())\n            },5000)\n          })*/\n        };\n\n        let createSpotifyPlaylist = async function () {\n          fetch('http://localhost:8888/createSpotifyPlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'createplaylist': playName,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          }).then(response => {\n            return response.json();\n          }).then(response => {\n            console.log(response);\n            console.log(response.done);\n            this.setState({\n              done: response.done,\n              link: response.link\n            });\n          });\n        };\n\n        getAppleISRC().then(response => {\n          setTimeout(function () {\n            createSpotifyPlaylist();\n          }, 10000);\n        });\n      }\n\n      if (theSource.source === \"spotifyToApple\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          spotifyToken\n        } = this.props;\n        const {\n          id\n        } = this.props;\n        const theid = {\n          id\n        };\n        let playName = this.state.playName;\n        let playlistURI = this.state.url;\n\n        let getSpotifyISRC = async function () {\n          fetch('http://localhost:8888/getSpotifyISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        let createApplePlaylist = async function () {\n          fetch('http://localhost:8888/createApplePlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'playlist': playName,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        getSpotifyISRC().then(() => {\n          setTimeout(function () {\n            createApplePlaylist();\n          }, 10000);\n        }).then(response => {\n          return response.json();\n        }).catch(err => {\n          console.log(err);\n        }).then(response => {\n          console.log(response);\n          this.setState({\n            done: response.done,\n            link: response.link\n          });\n        });\n      }\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"playName\",\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, \"Enter Name of Your New Playlist\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"url\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, \"Enter URL of the Playlist You want to Convert\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"url\",\n      onChange: this.handleChange,\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"playName\",\n      onChange: this.handleChange,\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"Convert!\")), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, this.state.done), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, this.state.link));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    appleToken: state.appleToken,\n    id: state.id,\n    spotifyToken: state.spotifyToken,\n    idA2S: state.idA2S,\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps)(Converter);","map":{"version":3,"sources":["/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js"],"names":["React","Component","connect","Converter","constructor","props","state","url","playName","link","done","handleChange","e","setState","target","id","value","console","log","handleSubmit","preventDefault","source","theSource","appleToken","idA2S","theid","spotifyToken","playlistURI","getAppleISRC","fetch","method","headers","body","JSON","stringify","createSpotifyPlaylist","then","response","json","setTimeout","getSpotifyISRC","createApplePlaylist","catch","err","bind","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component{\n    constructor(props){\n        super(props)\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        url: null,\n        playName: null,\n        link: null,\n        done: null\n    }\n\n    \n\n    handleChange = async (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n        console.log(this.state)\n        \n    }\n    handleSubmit = (e) => { \n        \n        \n        e.preventDefault();\n\n        this.setState({\n            done:\"Converting...\"\n        })\n\n\n        const { source } = this.props;\n        const theSource = { source };\n        if ( theSource.source === \"appleToSpotify\" ){\n           \n            const { appleToken } = this.props;\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            const { spotifyToken } = this.props;\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n            \n\n\n            let getAppleISRC = async function(){\n                fetch('http://localhost:8888/getAppleISRC',{\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json'\n                },\n                    body:JSON.stringify({\n                        'url': playlistURI,\n                        'authToken': { appleToken },\n                        'id': theid\n                })\n                    \n                })/*.then((response)=>{\n                    setTimeout(function(){\n                        console.log(response.json())\n                    },5000)\n                })*/\n            }\n\n        let createSpotifyPlaylist = async function(){\n            fetch('http://localhost:8888/createSpotifyPlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'createplaylist': playName,\n                    'authToken': {spotifyToken},\n                    'id':theid\n                })\n            }).then((response)=>{\n                \n                   return response.json()\n                \n            }).then((response)=>{\n                \n                    console.log(response)\n                    console.log(response.done)\n                    this.setState({\n                        done:response.done,\n                        link:response.link\n                    })\n                \n            })\n        }\n        \n        getAppleISRC().then((response)=>{\n            \n            setTimeout(function(){\n                createSpotifyPlaylist()\n        \n            },10000)\n        })\n\n        }\n        if ( theSource.source ===\"spotifyToApple\"){\n\n            const { appleToken } = this.props;\n            const { spotifyToken } = this.props;\n            const { id }=this.props\n            const theid = { id }\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n\n            let getSpotifyISRC = async function(){\n                \n                fetch('http://localhost:8888/getSpotifyISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { spotifyToken },\n                    'id': theid\n                })\n                    \n                })    \n            }\n\n            \n        let createApplePlaylist = async function(){\n            fetch('http://localhost:8888/createApplePlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'playlist': playName,\n                    'authToken': { appleToken },\n                    'id': theid\n\n                })\n            })\n        }\n        \n        getSpotifyISRC().then(()=>{\n            setTimeout(function(){\n                createApplePlaylist()\n            },10000)\n        }).then((response)=>{\n            return response.json();\n           })\n         .catch((err)=>{\n         console.log(err)\n         }).then(response=>{\n             console.log(response)\n             this.setState({\n                 done: response.done,\n                 link: response.link\n             })\n         })\n\n        }\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        <div>\n            <form onSubmit={this.handleSubmit} >\n            <label for=\"playName\" align=\"right\">Enter Name of Your New Playlist</label>\n            <label for=\"url\" align=\"left\">Enter URL of the Playlist You want to Convert</label>\n            <br />\n            <input type = \"text\" id=\"url\" onChange={this.handleChange} align=\"left\"></input>\n            <input type = \"text\" id=\"playName\" onChange={this.handleChange} align=\"right\"></input>\n            \n            <button  >Convert!</button>\n            </form>\n            <h1>{this.state.done}</h1>\n            <h1>{this.state.link}</h1>\n        </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);"]},"metadata":{},"sourceType":"module"}
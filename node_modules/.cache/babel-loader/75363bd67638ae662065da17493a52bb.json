{"ast":null,"code":"var _jsxFileName = \"/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component {\n  constructor(props) {\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"playName\",\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, \"Enter Name of Your New Playlist\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"url\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"Enter URL of the Playlist You want to Convert\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"url\",\n      onChange: this.handleChange,\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"playName\",\n      onChange: this.handleChange,\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, \"Convert!\")), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, this.state.done), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, this.state.link));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    appleToken: state.appleToken,\n    id: state.id,\n    spotifyToken: state.spotifyToken,\n    idA2S: state.idA2S,\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps)(Converter);","map":{"version":3,"sources":["/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js"],"names":["React","Component","connect","Converter","constructor","props","handleSubmit","bind","render","handleChange","state","done","link","mapStateToProps","appleToken","id","spotifyToken","idA2S","source"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAiC;AAC7BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AA6JDC,EAAAA,MAAM,GAAE;AAEJ,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,QAAQ,EAAE,KAAKF,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAO,MAAA,GAAG,EAAC,UAAX;AAAsB,MAAA,KAAK,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,eAEA;AAAO,MAAA,GAAG,EAAC,KAAX;AAAiB,MAAA,KAAK,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,eAIA;AAAO,MAAA,IAAI,EAAG,MAAd;AAAqB,MAAA,EAAE,EAAC,KAAxB;AAA8B,MAAA,QAAQ,EAAE,KAAKG,YAA7C;AAA2D,MAAA,KAAK,EAAC,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAO,MAAA,IAAI,EAAG,MAAd;AAAqB,MAAA,EAAE,EAAC,UAAxB;AAAmC,MAAA,QAAQ,EAAE,KAAKA,YAAlD;AAAgE,MAAA,KAAK,EAAC,OAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,eAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPA,CADJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKC,KAAL,CAAWC,IAAhB,CAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKD,KAAL,CAAWE,IAAhB,CAXJ,CADA;AAgBH;;AAlL4B;;AAqLjC,MAAMC,eAAe,GAAIH,KAAD,IAAW;AAC/B,SAAO;AACHI,IAAAA,UAAU,EAAEJ,KAAK,CAACI,UADf;AAEHC,IAAAA,EAAE,EAAEL,KAAK,CAACK,EAFP;AAGHC,IAAAA,YAAY,EAAEN,KAAK,CAACM,YAHjB;AAIHC,IAAAA,KAAK,EAAEP,KAAK,CAACO,KAJV;AAKHC,IAAAA,MAAM,EAAER,KAAK,CAACQ;AALX,GAAP;AAOH,CARD;;AAUA,eAAehB,OAAO,CAACW,eAAD,CAAP,CAAyBV,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component{\n    constructor(props){\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    state = {\n        url: null,\n        playName: null,\n        link: null,\n        done: null\n    }\n\n    \n\n    handleChange = async (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n        console.log(this.state)\n        \n    }\n    handleSubmit = (e) => { \n        \n        \n        e.preventDefault();\n\n        this.setState({\n            done:\"Converting...\"\n        })\n\n\n        const { source } = this.props;\n        const theSource = { source };\n        if ( theSource.source === \"appleToSpotify\" ){\n           \n            const { appleToken } = this.props;\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            const { spotifyToken } = this.props;\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n            \n\n\n            let getAppleISRC = async function(){\n                fetch('http://localhost:8888/getAppleISRC',{\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json'\n                },\n                    body:JSON.stringify({\n                        'url': playlistURI,\n                        'authToken': { appleToken },\n                        'id': theid\n                })\n                    \n                })/*.then((response)=>{\n                    setTimeout(function(){\n                        console.log(response.json())\n                    },5000)\n                })*/\n            }\n\n        let createSpotifyPlaylist = async function(){\n            fetch('http://localhost:8888/createSpotifyPlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'createplaylist': playName,\n                    'authToken': {spotifyToken},\n                    'id':theid\n                })\n            }).then((response)=>{\n                \n                   return response.json()\n                \n            }).then((response)=>{\n                \n                    console.log(response)\n                    this.setState({\n                        done:response.done,\n                        link:response.link\n                    })\n                \n            })\n        }\n        \n        getAppleISRC().then((response)=>{\n            \n            setTimeout(function(){\n                createSpotifyPlaylist()\n        \n            },10000)\n        })\n\n        }\n        if ( theSource.source ===\"spotifyToApple\"){\n\n            const { appleToken } = this.props;\n            const { spotifyToken } = this.props;\n            const { id }=this.props\n            const theid = { id }\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n\n            let getSpotifyISRC = async function(){\n                \n                fetch('http://localhost:8888/getSpotifyISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { spotifyToken },\n                    'id': theid\n                })\n                    \n                })    \n            }\n\n            \n        let createApplePlaylist = async function(){\n            fetch('http://localhost:8888/createApplePlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'playlist': playName,\n                    'authToken': { appleToken },\n                    'id': theid\n\n                })\n            })\n        }\n        \n        getSpotifyISRC().then(()=>{\n            setTimeout(function(){\n                createApplePlaylist()\n            },10000)\n        }).then((response)=>{\n            return response.json();\n           })\n         .catch((err)=>{\n         console.log(err)\n         }).then(response=>{\n             console.log(response)\n             this.setState({\n                 done: response.done,\n                 link: response.link\n             })\n         })\n\n        }\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        <div>\n            <form onSubmit={this.handleSubmit} >\n            <label for=\"playName\" align=\"right\">Enter Name of Your New Playlist</label>\n            <label for=\"url\" align=\"left\">Enter URL of the Playlist You want to Convert</label>\n            <br />\n            <input type = \"text\" id=\"url\" onChange={this.handleChange} align=\"left\"></input>\n            <input type = \"text\" id=\"playName\" onChange={this.handleChange} align=\"right\"></input>\n            \n            <button  >Convert!</button>\n            </form>\n            <h1>{this.state.done}</h1>\n            <h1>{this.state.link}</h1>\n        </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);"]},"metadata":{},"sourceType":"module"}
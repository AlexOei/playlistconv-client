{"ast":null,"code":"var _jsxFileName = \"/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      url: null,\n      playName: null,\n      link: null,\n      done: null\n    };\n\n    this.handleChange = async e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        done: \"Converting...\"\n      });\n      const {\n        source\n      } = this.props;\n      const theSource = {\n        source\n      };\n\n      if (theSource.source === \"appleToSpotify\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          idA2S\n        } = this.props;\n        const theid = {\n          idA2S\n        };\n        const {\n          spotifyToken\n        } = this.props;\n        let playName = this.state.playName;\n        let playlistURI = this.state.url;\n\n        let getAppleISRC = async function () {\n          fetch('http://localhost:8888/getAppleISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        let createSpotifyPlaylist = async function () {\n          fetch('http://localhost:8888/createSpotifyPlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'createplaylist': playName,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        getAppleISRC().then(() => {\n          setTimeout(function () {\n            createSpotifyPlaylist();\n          }, 10000).then(response => {\n            return response.json();\n          }).catch(err => {\n            console.log(err);\n          }).then(response => {\n            console.log(response);\n          });\n        });\n      }\n\n      if (theSource.source === \"spotifyToApple\") {\n        const {\n          appleToken\n        } = this.props;\n        const {\n          spotifyToken\n        } = this.props;\n        const {\n          id\n        } = this.props;\n        const theid = {\n          id\n        };\n        let playName = this.state.playName;\n        let playlistURI = this.state.url;\n\n        let getSpotifyISRC = async function () {\n          fetch('http://localhost:8888/getSpotifyISRC', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'url': playlistURI,\n              'authToken': {\n                spotifyToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        let createApplePlaylist = async function () {\n          fetch('http://localhost:8888/createApplePlaylist', {\n            method: 'POST',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              'playlist': playName,\n              'authToken': {\n                appleToken\n              },\n              'id': theid\n            })\n          });\n        };\n\n        getSpotifyISRC().then(() => {\n          setTimeout(function () {\n            createApplePlaylist();\n          }, 10000);\n        }).then(response => {\n          return response.json();\n        }).catch(err => {\n          console.log(err);\n        }).then(response => {\n          console.log(response);\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"playName\",\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, \"Enter Name of Your New Playlist\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"url\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, \"Enter URL of the Playlist You want to Convert\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"url\",\n      onChange: this.handleChange,\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"playName\",\n      onChange: this.handleChange,\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, \"Convert!\")), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, this.state.done), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, this.state.link));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    appleToken: state.appleToken,\n    id: state.id,\n    spotifyToken: state.spotifyToken,\n    idA2S: state.idA2S,\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps)(Converter);","map":{"version":3,"sources":["/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js"],"names":["React","Component","connect","Converter","state","url","playName","link","done","handleChange","e","setState","target","id","value","console","log","handleSubmit","preventDefault","source","props","theSource","appleToken","idA2S","theid","spotifyToken","playlistURI","getAppleISRC","fetch","method","headers","body","JSON","stringify","createSpotifyPlaylist","then","setTimeout","response","json","catch","err","getSpotifyISRC","createApplePlaylist","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component{\n    state = {\n        url: null,\n        playName: null,\n        link: null,\n        done: null\n    }\n    handleChange = async (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n        console.log(this.state)\n        \n    }\n    handleSubmit = (e) => { \n\n        \n        e.preventDefault();\n\n        this.setState({\n            done:\"Converting...\"\n        })\n\n\n        const { source } = this.props;\n        const theSource = { source };\n        if ( theSource.source === \"appleToSpotify\" ){\n           \n            const { appleToken } = this.props;\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            const { spotifyToken } = this.props;\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n            \n\n\n            let getAppleISRC = async function(){\n                fetch('http://localhost:8888/getAppleISRC',{\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json'\n                },\n                    body:JSON.stringify({\n                        'url': playlistURI,\n                        'authToken': { appleToken },\n                        'id': theid\n                })\n                    \n                })\n            }\n\n        let createSpotifyPlaylist = async function(){\n            fetch('http://localhost:8888/createSpotifyPlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'createplaylist': playName,\n                    'authToken': {spotifyToken},\n                    'id':theid\n                })\n            })\n        }\n        \n        getAppleISRC().then(()=>{\n            setTimeout(function(){\n                createSpotifyPlaylist()\n            },10000).then((response)=>{\n                return response.json();\n               })\n             .catch((err)=>{\n             console.log(err)\n             }).then(response=>{\n                 console.log(response)\n                 \n             })\n        })\n\n\n        }\n        if ( theSource.source ===\"spotifyToApple\"){\n\n            const { appleToken } = this.props;\n            const { spotifyToken } = this.props;\n            const { id }=this.props\n            const theid = { id }\n            let playName = this.state.playName\n            let playlistURI = this.state.url\n\n            let getSpotifyISRC = async function(){\n                \n                fetch('http://localhost:8888/getSpotifyISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { spotifyToken },\n                    'id': theid\n                })\n                    \n                })    \n            }\n\n            \n        let createApplePlaylist = async function(){\n            fetch('http://localhost:8888/createApplePlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'playlist': playName,\n                    'authToken': { appleToken },\n                    'id': theid\n\n                })\n            })\n        }\n        \n        getSpotifyISRC().then(()=>{\n            setTimeout(function(){\n                createApplePlaylist()\n            },10000)\n        }).then((response)=>{\n            return response.json();\n           })\n         .catch((err)=>{\n         console.log(err)\n         }).then(response=>{\n             console.log(response)\n         })\n\n        }\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        <div>\n            <form onSubmit={this.handleSubmit} >\n            <label for=\"playName\" align=\"right\">Enter Name of Your New Playlist</label>\n            <label for=\"url\" align=\"left\">Enter URL of the Playlist You want to Convert</label>\n            <br />\n            <input type = \"text\" id=\"url\" onChange={this.handleChange} align=\"left\"></input>\n            <input type = \"text\" id=\"playName\" onChange={this.handleChange} align=\"right\"></input>\n            \n            <button  >Convert!</button>\n            </form>\n            <h1>{this.state.done}</h1>\n            <h1>{this.state.link}</h1>\n        </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      url: null,\n      playName: null\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        source\n      } = this.props;\n      const theSource = {\n        source\n      };\n\n      if (theSource == \"appleToSpotify\") {\n        let playlistURI = this.state.url;\n        const {\n          appleToken\n        } = this.props;\n        const Token = {\n          appleToken\n        };\n        console.log(Token);\n        const {\n          idA2S\n        } = this.props;\n        const theid = {\n          idA2S\n        };\n        console.log(theid);\n\n        let getAppleISRC = async function () {\n          setTimeout(function () {\n            fetch('http://localhost:8888/getAppleISRC', {\n              method: 'POST',\n              headers: {\n                'Content-type': 'application/json'\n              },\n              body: JSON.stringify({\n                'url': playlistURI,\n                'authToken': Token,\n                'id': theid\n              })\n            });\n          }, 5000);\n        };\n\n        getAppleISRC();\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"playName\",\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Enter Name of Your New Playlist\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"URL\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, \"Enter URL of the Playlist You want to Convert\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"playName\",\n      onChange: this.handleChange,\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"URL\",\n      onChange: this.handleChange,\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Convert!\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    appleToken: state.appleToken,\n    id: state.id,\n    spotifyToken: state.spotifyToken,\n    idA2S: state.idA2S,\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps)(Converter);","map":{"version":3,"sources":["/Users/alexoei/playlist/spotify_to_apple/myapp/src/Components/convert.js"],"names":["React","Component","connect","Converter","state","url","playName","handleSubmit","e","preventDefault","source","props","theSource","playlistURI","appleToken","Token","console","log","idA2S","theid","getAppleISRC","setTimeout","fetch","method","headers","body","JSON","stringify","render","handleChange","mapStateToProps","id","spotifyToken"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nclass Converter extends Component{\n    state = {\n        url: null,\n        playName: null,\n    }\n    handleSubmit = (e) => { \n        e.preventDefault();\n        const { source } = this.props;\n        const theSource = { source };\n        if ( theSource ==\"appleToSpotify\" ){\n            let playlistURI = this.state.url\n            const { appleToken } = this.props;\n            const Token = { appleToken };\n            console.log(Token)\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            console.log(theid);\n\n            let getAppleISRC = async function(){\n            setTimeout (function(){\n                \n                    fetch('http://localhost:8888/getAppleISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': Token,\n                    'id': theid\n                })\n                    \n                })\n            \n            },5000)  \n        }\n\n        getAppleISRC();\n        }\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        <div>\n            <form onSubmit={this.handleSubmit}>\n            <label for=\"playName\" align=\"right\">Enter Name of Your New Playlist</label>\n            <label for=\"URL\" align=\"left\">Enter URL of the Playlist You want to Convert</label>\n            <input type = \"text\" id=\"playName\" onChange={this.handleChange} align=\"right\"></input>\n            <input type = \"text\" id=\"URL\" onChange={this.handleChange} align=\"left\"></input>\n            <button>Convert!</button>\n            </form>\n\n        </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);"]},"metadata":{},"sourceType":"module"}
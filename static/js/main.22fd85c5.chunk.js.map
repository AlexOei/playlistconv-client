{"version":3,"sources":["Components/login.js","Components/source.js","Components/convert.js","Components/header.js","Components/footer.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["AppleLogin","state","login","handleClickApple","e","a","console","log","apiID","appleAuth","window","MusicKit","configure","developerToken","app","name","declarativeMarkup","authorize","then","musicUserToken","setState","token","props","addToken","handleClickSpotify","fetch","method","response","text","data","location","className","Button","variant","onClick","this","Component","connect","dispatch","type","payload","Source","handleSelect1","hash","document","URL","substring","split","addSpotifyToken","addSource","idA2S","Math","floor","random","addIDA2S","addAppleToken","handleSelect2","id","addID","Form","Label","ButtonGroup","toggle","ToggleButton","source","Converter","url","playName","link","done","valid","handleChange","target","value","handleSubmit","preventDefault","theSource","playlistURI","appleToken","theid","spotifyToken","playlistURL","includes","getAppleISRC","headers","body","JSON","stringify","json","createSpotifyPlaylist","responseData","sendAppleISRC","createplaylist","length","sendSpotifyISRC","createApplePlaylist","sendISRC","Group","Row","Col","xs","Control","size","placeholder","onChange","href","Header","Footer","App","rel","src","class","Boolean","hostname","match","initState","rootReducer","action","store","createStore","subscribe","getState","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22fd85c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap/';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport apiID from './config.json'\n\nclass AppleLogin extends Component {\n   \n    state = {\n        login:null\n    }\n\n    handleClickApple = async (e) => {\n        console.log(apiID.appleAuth)\n        let music = window.MusicKit.configure({\n            developerToken: apiID.appleAuth,\n            app: {\n                name: 'My Cool Web App'\n            },\n            declarativeMarkup: true\n            });\n\n        music.authorize().then(musicUserToken=>{\n            this.setState({\n                login:\"Logged In!\"\n            })\n            let token = musicUserToken;\n            this.props.addToken(token);\n    \n            })\n        \n\n    }\n\n    handleClickSpotify = async (e) => {\n        const response = await fetch('https://playlist-converter-server.herokuapp.com/authorize',{\n            method:'GET',\n        });\n        const data = await response.text()\n        window.location = data;\n\n    }\n    \n    render(){\n        return(\n            \n        <div className=\"container-login\">\n            <div className=\"text-center\">\n            <br />\n            <Button variant=\"dark\" onClick={this.handleClickSpotify} className =\"spotify\" > Login to Spotify</Button>\n            <Button variant=\"dark\" className=\"applemusic\" onClick={this.handleClickApple} > Login to Apple Music</Button>\n            <p>{this.state.login}</p>\n            </div>\n        \n        </div>\n\n        )\n    }\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        addToken: (token) => {dispatch ({type: 'ADD_APPLETOKEN', payload: token})},\n       \n    }\n}\n\n\nexport default connect(null, mapDispatchToProps)(AppleLogin);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { ButtonGroup, ToggleButton, Form } from 'react-bootstrap';\nimport apiID from './config.json'\n\nclass Source extends Component {\n   \n    handleSelect1 = (e) =>{\n        var hash = document.URL\n        hash = hash.substring(5).split(\"&\")[0].split(\"=\")[1];\n        this.props.addSpotifyToken(hash)\n        let source = \"appleToSpotify\";\n        this.props.addSource(source);\n        let idA2S = Math.floor(Math.random()*100000);\n        this.props.addIDA2S(idA2S)\n        let music = window.MusicKit.configure({\n            developerToken: apiID.appleAuth,\n            app: {\n                name: 'Playlist Converter'\n            },\n            declarativeMarkup: true\n            });\n\n        music.authorize().then(musicUserToken=>{\n            console.log(musicUserToken);\n            let token = musicUserToken;\n            this.props.addAppleToken(token);\n    \n            })\n        \n        \n    }\n    handleSelect2 = (e) =>{\n        var hash = document.URL\n        hash = hash.substring(5).split(\"&\")[0].split(\"=\")[1];\n        this.props.addSpotifyToken(hash)\n        let source = \"spotifyToApple\";\n        this.props.addSource(source)\n        let id = Math.floor(Math.random()*100000);\n        this.props.addID(id)\n        let music = window.MusicKit.configure({\n            developerToken: apiID.appleAuth,\n            app: {\n                name: 'My Cool Web App'\n            },\n            declarativeMarkup: true\n            });\n\n        music.authorize().then(musicUserToken=>{\n            console.log(musicUserToken);\n            let token = musicUserToken;\n            this.props.addAppleToken(token);\n    \n            })\n\n    }\n    \n    render(){\n        \n        return(\n            <Form>\n            <div className=\"text-center\">\n            <Form.Label\n            className = \"title\">Choose Source and Destination</Form.Label>\n            <br />\n            <div className=\"radio-container\" >\n            \n            <ButtonGroup toggle className=\"mb-2\">\n            <ToggleButton type=\"checkbox\" variant=\"dark\" onClick={this.handleSelect1} >Apple Music to Spotify</ToggleButton>\n            <ToggleButton type=\"checkbox\" variant=\"dark\" onClick={this.handleSelect2} >Spotify to Apple Music</ToggleButton>\n            </ButtonGroup>\n            \n            </div>\n            </div>\n            </Form>\n\n        )\n    }\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        addSource: (source)=> {dispatch({type: 'ADD_SOURCE', payload:source})}, \n        addID: (id) => {dispatch ({type: 'ADD_ID', payload:id})},\n        addIDA2S: (idA2S) => {dispatch ({type: 'ADD_IDA2S', payload:idA2S })},\n        addSpotifyToken: (hash) => {dispatch ({type: 'ADD_SPOTIFYTOKEN', payload: hash})},\n        addAppleToken: (token) => {dispatch ({type: 'ADD_APPLETOKEN', payload: token})}\n    }\n }\n    \n\n\n\nexport default connect(null, mapDispatchToProps)(Source);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Button, Col, Row } from 'react-bootstrap';\n\nimport './style.css';\n\nclass Converter extends Component{\n    state = {\n        url: \" \",\n        playName: null,\n        link: null,\n        done: null,\n        valid: null\n    }\n    \n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => { \n        e.preventDefault();\n        const { source } = this.props;\n        const theSource = { source };\n\n        if ( theSource.source !== \"spotifyToApple\" && theSource.source !== \"appleToSpotify\"){\n            this.setState({\n                valid:\"Please choose a source.\"\n            })\n        }\n\n        if ( theSource.source === \"appleToSpotify\" ){\n           \n            const { appleToken } = this.props;\n            const { idA2S }=this.props\n            const theid = { idA2S }\n            const { spotifyToken } = this.props;\n            let playName = this.state.playName\n            let playlistURL = this.state.url\n            let playlistURI;\n            \n\n            if(playlistURL === \" \"){\n                this.setState({\n                    done:\"Invalid ID\"\n                })\n                return false;\n            }\n            this.setState({\n                done:\"Converting...\",\n                link: \" \",\n                valid: null\n            })\n\n            if (playlistURL.includes(\"us/playlist\")){\n                playlistURI = playlistURL.split(\"playlist/\")[1]\n                playlistURI=playlistURI.split(\"/\")[1]\n                \n            }\n            else if (playlistURL.includes(\"/playlist\")){\n                playlistURI=playlistURL.split(\"playlist/\")[1]\n\n            }\n            else if (playlistURL.includes(\"p.\")){\n               \n                playlistURI=playlistURL\n                \n            }\n            else if (playlistURL.includes(\"pl.u\")){\n                playlistURI=playlistURL\n            }else {\n                this.setState({\n                    done:\"Invalid URL\",\n                    valid: null\n                })\n            }\n\n\n        let getAppleISRC = async function(){\n            const response = await fetch('https://playlist-converter-server.herokuapp.com/getAppleISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { appleToken },\n                    'id': theid\n                })     \n            })\n            return response.json()\n        }\n\n        let createSpotifyPlaylist =  (async()=>{\n            const response = await fetch('https://playlist-converter-server.herokuapp.com/createSpotifyPlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'createplaylist': playName,\n                    'authToken': {spotifyToken},\n                    'id':theid\n                })\n            })\n        \n        const responseData = await response.json()\n            console.log(responseData)\n            this.setState({\n                done:responseData.done,\n                link:responseData.link\n            })\n                \n        })\n        \n        const createplaylist = async () => {\n            const sendAppleISRC = await getAppleISRC()\n            console.log(sendAppleISRC.done)\n            if (sendAppleISRC.done === 'done'){\n                createSpotifyPlaylist()\n            }\n        }\n\n        createplaylist()\n        \n        }\n\n        if ( theSource.source ===\"spotifyToApple\"){\n\n            const { appleToken } = this.props;\n            const { spotifyToken } = this.props;\n            const { id }=this.props\n            const theid = { id }\n            let playName = this.state.playName\n            let playlistURL = this.state.url\n            let playlistURI\n\n            if(playlistURL === \" \"){\n                this.setState({\n                    done:\"Invalid URL\"\n                })\n                console.log('why')\n                return false;\n            }\n\n            this.setState({\n                done:\"Converting...\",\n                link: \" \",\n                valid: null\n            })\n\n            if (playlistURL.includes(\"https://open\")){\n               \n                playlistURI = playlistURL.split(\"?\")[0]\n                playlistURI=playlistURI.split(\"playlist/\")[1]\n            }\n            else if (playlistURL.includes(\"open.spotify\")){\n                playlistURI = playlistURL.split(\"playlist/\")[1]\n                \n            }\n            else if (playlistURL.length === 22){\n                playlistURI=playlistURL\n            }else {\n                this.setState({\n                    done:\"Invalid URL\"\n                })\n            }\n\n\n    \n            \n\n        let sendSpotifyISRC = async function(){\n            const response = await fetch('https://playlist-converter-server.herokuapp.com/getSpotifyISRC',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'url': playlistURI,\n                    'authToken': { spotifyToken },\n                    'id': theid\n                })\n            })   \n\n            return response.json()\n        }\n\n            \n        const createApplePlaylist = (async()=>{\n            const response = await fetch('https://playlist-converter-server.herokuapp.com/createApplePlaylist',{\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body:JSON.stringify({\n                    'playlist': playName,\n                    'authToken': { appleToken },\n                    'id': theid\n\n                })\n            })\n            \n            const responseData = await response.json()\n            console.log(responseData)\n            this.setState({\n                done:responseData.done,\n                link:responseData.link\n            })\n             \n        })\n\n        const createplaylist = async () => {\n            const sendISRC = await sendSpotifyISRC()\n            console.log(sendISRC)\n            if (sendISRC.done === 'done'){\n                \n                createApplePlaylist()\n            }\n        }\n        \n        createplaylist()\n\n        }\n\n        \n    }\n  \n    \n    render(){\n        \n        return(\n        \n        <Form>\n        <Form.Group>\n          <div className = \"text-center\">\n          <Row className=\"justify-content-md-center\">\n          \n          <Col xs={5} >\n          <Form.Control  size = \"med\" type = \"text\" placeholder=\"Enter Playlist URL\" onChange={this.handleChange} id=\"url\" />\n          </Col>\n          </Row>\n          <br />\n          <Row className=\"justify-content-md-center\">\n          <Col xs={3}>\n          <Form.Control  size = \"med\" type = \"text\" placeholder = \"Enter Name of New Playlist\" onChange={this.handleChange} id=\"playName\"/>\n          </Col>\n          </Row>\n          <br />\n          <Button variant=\"dark\" type=\"submit\" onClick={this.handleSubmit} className=\"convert\">Convert!</Button>\n            <h1>{this.state.done}</h1>\n            <a href = {this.state.link}>{this.state.link}</a>\n            <h1>{this.state.valid}</h1>\n            <p>Convert your favorite playlists to and from Apple Music and Spotify!</p>\n            <p>Your playlist link will appear below the convert button when completed.</p>\n           <p> Note: Due to Spotify's song limit per request, conversion caps at 100 songs</p>\n           <p> Note: Spotify exclusives such as Spotify singles cannot be converted</p>\n           <p> Note: If you are already logged into Apple Music on your browser, a popup to login may not appear</p>\n          </div>\n        </Form.Group>\n        </Form>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        appleToken: state.appleToken,\n        id: state.id,\n        spotifyToken: state.spotifyToken,\n        idA2S: state.idA2S,\n        source: state.source\n    }\n}\n\nexport default connect(mapStateToProps)(Converter);","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n   \n    render(){\n        return(\n            \n        <div className=\"text-center\">\n            <div className=\"header\">\n            <h1>Playlist Converter</h1>\n            </div>\n        </div>\n\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass Footer extends Component {\n   \n    render(){\n        return(\n            \n        <footer>\n            <div className=\"footer\">\n            <a href=\"mailto: alexoei13589@gmail.com\">Contact </a>\n            <a href=\"https://github.com/AlexOei/PlaylistConverter\"> Github</a>\n            \n            </div>\n           \n         \n\n        </footer>\n\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Login from './Components/login';\nimport Source from './Components/source';\nimport Convert from './Components/convert';\nimport Header from './Components/header';\nimport Footer from './Components/footer'\n\n\n\n\n\nclass App extends Component {\n  \n\n\n\n\n  render(){\n  return (\n    <div className=\"App\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Quicksand:wght@700&display=swap\" rel=\"stylesheet\" />\n\n      <script src=\"https://js-cdn.music.apple.com/musickit/v1/musickit.js\"></script>\n      <Header />\n      <Login />\n      <div class=\"container-convert\">\n      <Source />\n      <Convert />\n      <Footer />\n      </div>\n      \n    </div>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initState = {\n    appleToken: [],\n    spotifyToken: [],\n    id: [],\n    idA2S: [],\n    source:[]\n}\n\nconst rootReducer = (state = initState, action) => {\n    if (action.type === 'ADD_APPLETOKEN'){\n        return{\n            ...state,\n            appleToken: action.payload\n        }\n    }\n    if (action.type === 'ADD_SPOTIFYTOKEN'){\n        return{\n            ...state,\n            spotifyToken: action.payload\n        }\n    }\n    if (action.type === 'ADD_ID'){\n        return{\n            ...state,\n            id: action.payload\n        }\n    }\n    if (action.type === 'ADD_IDA2S'){\n        return{\n            ...state,\n            idA2S: action.payload\n        }\n    }\n    if (action.type === 'ADD_SOURCE'){\n        return{\n            ...state,\n            source: action.payload\n        }\n    }\n    \n    return state;\n}\n\n\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nstore.subscribe(()=>{\n  console.log(store.getState());\n})\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store= {store} >\n    <App />\n    </Provider>\n    </React.StrictMode>, document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default store"],"sourceRoot":""}